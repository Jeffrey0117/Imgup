generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Mapping {
  id              String          @id @default(cuid())
  hash            String          @unique
  filename        String
  url             String
  shortUrl        String
  createdAt       DateTime        @default(now())
  expiresAt       DateTime?
  password        String?
  deletedAt       DateTime?
  deletedBy       String?
  isDeleted       Boolean         @default(false)
  viewCount       Int             @default(0)
  fileExtension   String?
  backupUrls      Json?
  providerMetrics Json?
  uploadStats     Json?
  logs            AccessLog[]
  referrerStats   ReferrerStats[]

  @@index([createdAt])
  @@index([isDeleted])
}

model Admin {
  id             String         @id @default(cuid())
  email          String         @unique
  username       String         @unique
  passwordHash   String
  role           String         @default("moderator")
  totpSecret     String?
  totpEnabled    Boolean        @default(false)
  isActive       Boolean        @default(true)
  lastLoginAt    DateTime?
  lastLoginIp    String?
  failedAttempts Int            @default(0)
  lockedUntil    DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  sessions       AdminSession[]
  auditLogs      AuditLog[]

  @@index([email])
  @@index([username])
}

model AdminSession {
  id           String   @id @default(cuid())
  adminId      String
  token        String   @unique
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  admin        Admin    @relation(fields: [adminId], references: [id])

  @@index([token])
  @@index([adminId])
}

model AccessLog {
  id            String   @id @default(cuid())
  mappingId     String
  ipAddress     String
  userAgent     String?
  referer       String?
  createdAt     DateTime @default(now())
  accessType    String
  clientType    String
  country       String?
  refererDomain String?
  region        String?
  mapping       Mapping  @relation(fields: [mappingId], references: [id])

  @@index([mappingId])
  @@index([createdAt])
  @@index([refererDomain])
  @@index([accessType])
}

model ReferrerStats {
  id            String   @id @default(cuid())
  mappingId     String
  refererDomain String
  accessCount   Int      @default(0)
  lastAccessAt  DateTime @default(now())
  createdAt     DateTime @default(now())
  mapping       Mapping  @relation(fields: [mappingId], references: [id])

  @@unique([mappingId, refererDomain])
  @@index([mappingId])
  @@index([refererDomain])
  @@index([accessCount])
}

model AuditLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  entity    String
  entityId  String?
  details   Json?
  ipAddress String
  createdAt DateTime @default(now())
  admin     Admin    @relation(fields: [adminId], references: [id])

  @@index([adminId])
  @@index([action])
  @@index([entity])
  @@index([createdAt])
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt
  updatedBy String?
}

model User {
  id              String          @id @default(cuid())
  email           String          @unique
  username        String          @unique
  passwordHash    String
  tier            String          @default("guest")
  isActive        Boolean         @default(true)
  totalUploads    Int             @default(0)
  warningCount    Int             @default(0)
  restrictedUntil DateTime?
  blacklistedAt   DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  sessions        UserSession[]
  violations      RateViolation[]

  @@index([email])
  @@index([username])
  @@index([tier])
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model RateViolation {
  id          String   @id @default(cuid())
  userId      String?
  ipAddress   String
  violationType String
  endpoint    String
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ipAddress])
  @@index([createdAt])
}
